// npx prisma migrate dev
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER

enum OauthProvider {
  google
  linkedin
}

enum Country {
  France
  Germany
  UnitedKingdom
  Spain
  Italy
  USA
}

enum Role {
  USER
  ADMIN
}

model User {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique
  firstname            String
  lastname             String
  oauthProvider        OauthProvider
  createdAt            DateTime               @default(now())
  description          String
  jobTitle             String
  isCertified          Boolean
  certifiedDate        DateTime?
  image                String?
  country              Country
  roles                Role[]
  services             Service[]
  messages1            Message[]              @relation("sender")
  messages2            Message[]              @relation("receiver")
  offers1              Offer[]                @relation("sender")
  offers2              Offer[]                @relation("receiver")
  userBalance          UserBalance            @relation(fields: [userBalanceId], references: [id])
  userBalanceId        Int                    @unique
  UserBalanceEventsLog UserBalanceEventsLog[]
}

// SERVICE

enum Lang {
  FR
  EN
}

enum ServiceType {
  digital
  physical
}

enum Category {
  GraphiqueAndDesign
  MusicAndAudio
  OnlineCourse
  ProgrammingAndTech
  MarketingAndDigital
  LegalAdvice
  OnlineShopManagement
  Sale
  CompanyCreation
  IntellectualProperty
  Assistance
  BusinessPlan
  MarketResearch
  CorporateConsulting
  HRConsulting
  CustomerService
  SustainableDevelopmentConsulting
  ProductManagement
  AIConsulting
  Events
  Coaching
  CopywritingAndTranslation
  Photography
  Data
  Leisure
  VideoAndAnimation
  Recruitment
  DIY
  Gardening
}

model Service {
  id               Int         @id @default(autoincrement())
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  title            String
  descriptionShort String
  description      String
  createdAt        DateTime    @default(now())
  langs            Lang[]
  type             ServiceType
  localisation     String
  renewable        Boolean
  category         Category
  images           String[]
  prices           Price[]
  offers           Offer[]
}

// PRICE

enum PriceType {
  fix
  percent
  fixedPerItem
}

enum Currency {
  EUR
  USD
}

model Price {
  id        Int       @id @default(autoincrement())
  service   Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId Int
  type      PriceType
  number    Int
  currency  Currency
}

model Message {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  user1      User?     @relation("sender", fields: [senderId], references: [id], onDelete: SetNull)
  senderId   Int?
  user2      User?     @relation("receiver", fields: [receiverId], references: [id], onDelete: SetNull)
  receiverId Int?
  message    String
  readAt     DateTime?
  offer      Offer?    @relation(fields: [offerId], references: [id], onDelete: SetNull)
  offerId    Int?      @unique
}

// OFFER

model Offer {
  id             Int         @id @default(autoincrement())
  createdAt      DateTime    @default(now())
  user           User?       @relation("sender", fields: [userId], references: [id], onDelete: SetNull)
  userId         Int?
  userReceiver   User?       @relation("receiver", fields: [userIdReceiver], references: [id], onDelete: SetNull)
  userIdReceiver Int?
  service        Service?    @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  serviceId      Int?
  description    String
  deadline       DateTime
  isAccepted     Boolean
  acceptedAt     DateTime?
  isPaid         Boolean
  paidDate       DateTime?
  isTerminated   Boolean
  terminatedAt   DateTime?
  message        Message?
  milestone      Milestone[]
}

model Milestone {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  offer            Offer          @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId          Int
  description      String
  deadline         DateTime
  terminatedAt     DateTime?
  validatedAt      DateTime?
  priceMilestone   PriceMilestone @relation(fields: [priceMilestoneId], references: [id])
  priceMilestoneId Int            @unique
}

model PriceMilestone {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  type           PriceType
  number         Int
  currency       Currency
  milestone      Milestone?
  baseForPercent Int?
  itemCount      Int
}

model UserBalance {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User?
  balance   Int      @default(0)
  updatedAt DateTime @default(now()) @updatedAt
}

enum PaymentEventType {
  payout
  pre_payment
  payment
  invoicing
}

enum PaymentProvider {
  stripe
}

enum PaymentFrom {
  offer
  milestone
}

model UserBalanceEventsLog {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  amount            Int
  eventType         PaymentEventType
  provider          PaymentProvider
  providerPaymentId String
  from              PaymentFrom
  fromId            Int
}
